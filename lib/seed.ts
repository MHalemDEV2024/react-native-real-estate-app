/**
 * Seed Script for Appwrite Collections
 * ------------------------------------
 * This script:
 * 1. Clears all existing data from the collections.
 * 2. Seeds Agents, Reviews, Galleries, and Properties with sample data.
 * 
 * ‚ö° Notes:
 * - System fields ($id, $createdAt, $updatedAt) are auto-generated by Appwrite.
 *   Do NOT include them in `createDocument` payloads.
 * - Ensure the collection IDs in `config` match your Appwrite project.
 */

import { config, database } from "@/lib/appwrite";
import { ID } from "react-native-appwrite";
import {
  agentImages,
  galleryImages,
  propertiesImages,
  reviewImages,
} from "./data";

/** Collection references (from config) */
const COLLECTIONS = {
  AGENT: config.agentsCollectionId,
  REVIEWS: config.reviewsCollectionId, // ‚úÖ fixed typo
  GALLERY: config.galleriesCollectionId,
  PROPERTY: config.propertiesCollectionId,
};

/** Property types for seeding */
const propertyTypes = [
  "House",
  "Townhomes",
  "Condos",
  "Duplexes",
  "Studios",
  "Villa",
  "Apartments",
  "Others",
];

/** Facilities options */
const facilities = [
  "Laundry",
  "Parking",
  "Sport",
  "Cutlery",
  "Gym",
  "Swimming",
  "Wifi",
  "Pet",
  "Restaurant",
];

/**
 * Utility: Pick a random subset from an array
 * @param array source array
 * @param minItems minimum items to pick
 * @param maxItems maximum items to pick
 */
function getRandomSubset<T>(array: T[], minItems: number, maxItems: number): T[] {
  if (minItems > maxItems) throw new Error("minItems cannot be greater than maxItems");
  if (minItems < 0 || maxItems > array.length)
    throw new Error("minItems or maxItems are out of valid range for the array");

  // Random subset size
  const subsetSize = Math.floor(Math.random() * (maxItems - minItems + 1)) + minItems;

  // Shuffle copy
  const arrayCopy = [...array];
  for (let i = arrayCopy.length - 1; i > 0; i--) {
    const randomIndex = Math.floor(Math.random() * (i + 1));
    [arrayCopy[i], arrayCopy[randomIndex]] = [arrayCopy[randomIndex], arrayCopy[i]];
  }

  return arrayCopy.slice(0, subsetSize);
}

/**
 * Main Seed Function
 * ------------------
 * - Clears old data
 * - Seeds collections with sample data
 */
async function seed() {
  try {
    /** Step 1: Clear existing data */
    for (const key in COLLECTIONS) {
      const collectionId = COLLECTIONS[key as keyof typeof COLLECTIONS];
      const documents = await database.listDocuments(config.databaseId!, collectionId!);
      for (const doc of documents.documents) {
        await database.deleteDocument(config.databaseId!, collectionId!, doc.$id);
      }
    }
    console.log("‚úÖ Cleared all existing data.");

    /** Step 2: Seed Agents */
    const agents = [];
    for (let i = 1; i <= 5; i++) {
      const agent = await database.createDocument(
        config.databaseId!,
        COLLECTIONS.AGENT!,
        ID.unique(),
        {
          name: `Agent ${i}`,
          email: `agent${i}@example.com`,
          avatar: agentImages[Math.floor(Math.random() * agentImages.length)],
        }
      );
      agents.push(agent);
    }
    console.log(`‚úÖ Seeded ${agents.length} agents.`);

    /** Step 3: Seed Reviews */
    const reviews = [];
    for (let i = 1; i <= 20; i++) {
      const review = await database.createDocument(
        config.databaseId!,
        COLLECTIONS.REVIEWS!,
        ID.unique(),
        {
          name: `Reviewer ${i}`,
          avatar: reviewImages[Math.floor(Math.random() * reviewImages.length)],
          review: `This is a review by Reviewer ${i}.`,
          rating: Math.floor(Math.random() * 5) + 1, // 1‚Äì5 stars
        }
      );
      reviews.push(review);
    }
    console.log(`‚úÖ Seeded ${reviews.length} reviews.`);

    /** Step 4: Seed Galleries */
    const galleries = [];
    for (const image of galleryImages) {
      const gallery = await database.createDocument(
        config.databaseId!,
        COLLECTIONS.GALLERY!,
        ID.unique(),
        { image }
      );
      galleries.push(gallery);
    }
    console.log(`‚úÖ Seeded ${galleries.length} galleries.`);

    /** Step 5: Seed Properties */
    for (let i = 1; i <= 20; i++) {
      const assignedAgent = agents[Math.floor(Math.random() * agents.length)];
      const assignedReviews = getRandomSubset(reviews, 5, 7);
      const assignedGalleries = getRandomSubset(galleries, 3, 8);

      const selectedFacilities = facilities
        .sort(() => 0.5 - Math.random())
        .slice(0, Math.floor(Math.random() * facilities.length) + 1);

      const image =
        propertiesImages[i - 1] ??
        propertiesImages[Math.floor(Math.random() * propertiesImages.length)];

      const property = await database.createDocument(
        config.databaseId!,
        COLLECTIONS.PROPERTY!,
        ID.unique(),
        {
          name: `Property ${i}`,
          type: propertyTypes[Math.floor(Math.random() * propertyTypes.length)],
          description: `This is the description for Property ${i}.`,
          address: `123 Property Street, City ${i}`,
          gelocation: `192.168.1.${i}, 192.168.1.${i}`, // ‚úÖ matches schema spelling
          price: Math.floor(Math.random() * 9000) + 1000,
          area: Math.floor(Math.random() * 3000) + 500,
          bedrooms: Math.floor(Math.random() * 5) + 1,
          bathrooms: Math.floor(Math.random() * 5) + 1,
          rating: Math.floor(Math.random() * 5) + 1,
          facilities: selectedFacilities,
          image,
          agent: assignedAgent.$id,
          reviews: assignedReviews.map((review) => review.$id),
          gallery: assignedGalleries.map((gallery) => gallery.$id),
        }
      );

      console.log(`üè† Seeded property: ${property.name}`);
    }

    console.log("üéâ Data seeding completed successfully.");
  } catch (error) {
    console.error("‚ùå Error seeding data:", error);
  }
}

export default seed;
